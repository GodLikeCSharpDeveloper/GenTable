@using BlazorStoreServAppV5.Pages
@using BlazorStoreServAppV5.Models.CssModels
@using BlazorStoreServAppV5.Repository.StoreLogic.CategoryRepository
@using BlazorStoreServAppV5.Repository.ThemeRepository
@using System.Reflection
@inherits LayoutComponentBase
@inject IDescriptionRepositoryService Description
@inject IUserRepositoryService User
@inject IProductRepositoryService Product
@inject IOrderRepositoryServise Order
@inject IThemeLogic Themes
@inject ICategoryLogic Category
<PageTitle>GenericTableAppV5</PageTitle>

<main style="overflow-x: hidden;">
    <NavMenu />
    <article class="content px-4" style="overflow-x: hidden;">
        @Body
    </article>
</main>
@code
{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    public static List<Users> UsersList { get; set; }
    public static List<ProductModel> ProductsList { get; set; }
    public static List<OrderModel> OrdersList { get; set; }
    public static List<CategoryModel> CategoriesList { get; set; }
    public static Users? CurrentUser { get; set; }
    public static bool IsAuth { get; set; }
    public static List<ProductModel> CartList { get; set; } = new();
    [Parameter]
    public int Id { get; set; }
    public static List<PropertyInfo> OrderPropertyInfos { get; set; }
    protected override async Task OnInitializedAsync()
    {
        CategoriesList = await Category.GetAllCategoriesAsync();
        ProductsList = await Product.GetAllProductsAsync();
        UsersList = await User.GetAllUsersAsync();
        OrdersList = await Order.GetAllOrdersAsync();
        CurrentUser = await User.GetCurrentUser(authenticationStateTask);
        var user = (await authenticationStateTask).User;
        IsAuth = user.Identity.IsAuthenticated;
        FullOrderPrice();
        OrderPropertyInfos = typeof(OrderModel).GetProperties().ToList();
      
    }

    public int FullPrice { get; set; } = 0;
    int FullPrices(List<ProductModel> prods)
    {
        foreach (var order in prods)
        {
            FullPrice = +order.Price;
        }
        return FullPrice;
    }

    void FullOrderPrice()
    {
        foreach (var price in OrdersList)
        {
            price.FullPrice = FullPrices(price.Products);
        }

    }

}