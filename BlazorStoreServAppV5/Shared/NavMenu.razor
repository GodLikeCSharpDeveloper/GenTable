@using BlazorStoreServAppV5.Models
@using BlazorStoreServAppV5.Models.AuthModel
@using BlazorStoreServAppV5.Models.CssModels
@using BlazorStoreServAppV5.Repository.StoreLogic.UserRepository
@using BlazorStoreServAppV5.Repository.ThemeRepository
@inject IUserRepositoryService UserRepository
@inject TokenProvider _TokenProvider
@inject IThemeLogic ThemesLogic
@inject NavigationManager NavManager
<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-12 @ThemesLogic.CurrentTheme">
        <a class="active" href="#home">Home</a>
        <a href="#news">News</a>
        <a href="Products">Table</a>
        <div class="dropdown">
            <button class="dropbtn">Dropdown</button>
            <div class="dropdown-content">
                @foreach (var item in ThemeModels)
                {
                    <button @onclick="@(() => ChangeTheme(item.Value))">@item.Theme</button>
                }
            </div>
        </div>
        <div class="@ThemesLogic.CurrentTheme-right ">
            <a href="Cart">Cart</a>
            <AuthorizeView>
                <Authorized>
                    <a href="/Account">Hello, @context.User.Identity?.Name!</a>
                    <form class="formclass" method="post" action="/identity/account/logout">
                        <input type="hidden" name="__RequestVerificationToken" value="@_TokenProvider.AntiForgeryToken"/>
                        <button id="subm" type="submit">Logout</button>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <a href="Identity/Account/Register">Register</a>
                    <a href="Identity/Account/Login">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
            <AuthorizeView Roles="Admin">
                <a href="#search">Se22arch</a>
            </AuthorizeView>
            <a href="#search">Se22arch</a>
            <a href="#about">About</a>
        </div>
    </div>
</div>






@code {
    public static List<Users> UsersList { get; set; }
    public List<ThemeModel> ThemeModels { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (UsersList == null)
        {
            UsersList = await UserRepository.GetAllUsersAsync();
        }
        ThemeModels = ThemesLogic.InitializeThemes();
    }


    [Parameter]
    public string Theme { get; set; } = "colorBlack";


    public void ChangeTheme(string currentTheme)
    {
        ThemesLogic.CurrentTheme = currentTheme;
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

}