@using BlazorStoreServAppV5.Models
@using BlazorStoreServAppV5.Models.AuthModel
@using BlazorStoreServAppV5.Models.CssModels
@using BlazorStoreServAppV5.Repository.StoreLogic.UserRepository
@inject IUserRepositoryService UserRepository
<div class="row">
    <div class="@Theme">
        <a class="active" href="#home">Home</a>
        <a href="#news">News</a>
        <a href="YourTables">Table</a>
        
        <div class="dropdown">
            <button class="dropbtn">Dropdown</button>
            <div class="dropdown-content">
                @foreach (var item in ListOfThemes)
                {
                    <button @onclick="@(() => ChangeTheme(item.Value))">@item.Theme</button>
                }
            </div>
        </div>
        <div class="@Theme-right">
            <LoginDisplay></LoginDisplay>
            <AuthorizeView Roles="Admin">
                <a href="#search">Se22arch</a>
            </AuthorizeView>
            <a href="#search">Se22arch</a>
            <a href="#about">About</a>
        </div>
    </div>
</div>






@code {
    public static List<Users> UsersList { get; set; }
    protected override async Task OnInitializedAsync()
    {
        UsersList = await UserRepository.GetAllUsersAsync();
        Themes();
    }

    [Parameter]
    public List<ThemeModel> ListOfThemes { get; set; } = new();
    public static string Theme { get; set; } = "colorBlack";

    void Themes()
    {
        ListOfThemes.Add(new ThemeModel() { Theme = "dark", Value = "colorBlack" });
        ListOfThemes.Add(new ThemeModel() { Theme = "light", Value = "colorWhite" });
        ListOfThemes.Add(new ThemeModel() { Theme = "green", Value = "colorGreen" });
    }
    public void ChangeTheme(string currentTheme)
    {
        Theme = currentTheme;
    }

}