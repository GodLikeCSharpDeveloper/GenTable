@using BlazorStoreServAppV5.Models
@using BlazorStoreServAppV5.Models.AuthModel
@using BlazorStoreServAppV5.Models.CssModels
@using BlazorStoreServAppV5.Repository.StoreLogic.UserRepository
@using BlazorStoreServAppV5.Repository.ThemeRepository
@inject IUserRepositoryService UserRepository
@inject TokenProvider _TokenProvider
@inject IThemeLogic ThemesLogic
@inject NavigationManager NavManager

<div class="row align-content-center justify-content-start align-items-center NavBar">
    <div class="col-12 col-sm-12 col-lg-4 col-md-12 navheight d-flex  ">
        <button class="MenuClass bi-triangle" @onclick="WidthChanger"></button>
        <a href="/" class="btnNav bi-house-fill"></a>
        <a href="/Products" unselectable="on" class="btnNav">All products</a>
        <button class="btnNav">smth for future</button>
    </div>
    <div class="col-3 col-sm-12 col-md-12 col-lg-3 d-flex justify-content-start toHide">
        <input type="text" size="25" class="NavInput" placeholder="Search...">
        <button class="btnNav NavInputButton toHide bi-search"></button>
    </div>
    <div class="col-4 col-lg-5 col-md-6 justify-content-end navheight d-flex toHide">
        <button class="btnNav toHide">Flex item</button>
        <button class="btnNav toHide">Flex item</button>
        <a href="/AdminPanel"class="btnNav toHide">Admin Panel</a>
        <AuthorizeView>
            <NotAuthorized>
                <a href="Identity/Account/Login" class="btnNav toHide">Login</a>
                <a href="Identity/Account/Register" class="btnNav toHide">Register</a>
            </NotAuthorized>
            <Authorized>
                <a href="/Account" unselectable="on" class="btnNav toHide">Hello, @context.User.Identity?.Name!</a>
                <form class="formclass toHide" method="post" action="/identity/account/logout">
                    <input type="hidden" name="__RequestVerificationToken" value="@_TokenProvider.AntiForgeryToken"/>
                    <button class="btnNav formbtn" id="subm" type="submit">Logout</button>
                </form>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="sidepanel @SidePanelWidth">
        <input type="text" size="15" class="sp sidepanelSearch " placeholder="Search...">
        <button class="sp">Flex item</button>
        <button class="sp">Flex item</button>
        <button class="sp">Flex item</button>
        <button class="sp">Third flex item</button>
        <button class="sp">Third flex item</button>
        <button class="closebtn" @onclick="WidthChanger">×</button>
        <AuthorizeView>
            <NotAuthorized>
                <a href="Identity/Account/Login" class="btnNav">Login</a>
                <a href="Identity/Account/Register" class="btnNav">Register</a>

            </NotAuthorized>
            <Authorized>
                <a href="/Account" unselectable="on" class=" formA">Hello, @context.User.Identity?.Name!</a>
                <form class="form" method="post" action="/identity/account/logout">
                    <input type="hidden" name="__RequestVerificationToken" value="@_TokenProvider.AntiForgeryToken"/>
                    <button class=" " id="subm" type="submit">Logout</button>
                </form>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@code {
    public string SidePanelWidth { get; set; } = "Hide";

    void WidthChanger()
    {
        if (SidePanelWidth == "Show")
            SidePanelWidth = "Hide";
        else
            SidePanelWidth = "Show";
    }

}

@code {
    public static List<Users> UsersList { get; set; }
    public List<ThemeModel> ThemeModels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UsersList == null)
        {
            UsersList = await UserRepository.GetAllUsersAsync();
        }
        ThemeModels = ThemesLogic.InitializeThemes();
    }


    [Parameter]
    public string Theme { get; set; } = "colorBlack";


    public void ChangeTheme(string currentTheme)
    {
        ThemesLogic.CurrentTheme = currentTheme;
        NavManager.NavigateTo(NavManager.Uri, true);
    }

}