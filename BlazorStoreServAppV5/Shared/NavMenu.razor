@using BlazorStoreServAppV5.Models
@using BlazorStoreServAppV5.Models.AuthModel
@using BlazorStoreServAppV5.Models.CssModels
@using BlazorStoreServAppV5.Repository.StoreLogic.UserRepository
@using BlazorStoreServAppV5.Repository.ThemeRepository
@inject IUserRepositoryService UserRepository
@inject TokenProvider _TokenProvider
@inject IThemeLogic ThemesLogic
@inject NavigationManager NavManager

<div class="row">
    <div class="col">
        <div class="d-flex bd-highlight flex-wrap NavBar">
            <button class="MenuClass bi-triangle" @onclick="WidthChanger"></button>
            <a href="/" class="align-content-center btnNav bi-house-fill"></a>
            <a href="/Products" unselectable="on" class="btnNav">Flex item</a>
            <button class="btnNav">smth for future</button>
            <input type="text" size="25" class="NavInput" placeholder="Search...">
            <div class="ms-auto" style=""></div>
            <button class="btnNav toHide">Flex item</button>
            <button class="btnNav toHide">Flex item</button>
            <button class="btnNav toHide">Flex item</button>
            <AuthorizeView>
                <NotAuthorized>
                    <a href="Identity/Account/Login" class="btnNav toHide">Login</a>
                    <a href="Identity/Account/Register" class="btnNav toHide">Register</a>
                    
                </NotAuthorized>
                <Authorized>
                    <a href="/Account" unselectable="on" class="btnNav">Hello, @context.User.Identity?.Name!</a>
                    <form class="formclass" method="post" action="/identity/account/logout">
                        <input type="hidden" name="__RequestVerificationToken" value="@_TokenProvider.AntiForgeryToken"/>
                        <button class="btnNav formbtn" id="subm" type="submit">Logout</button>
                    </form>
                </Authorized>
                </AuthorizeView>
        </div>
    </div>
    <div class="sidepanel" style=" width:@SidePanelWidth">
        <button class="">Flex item</button>
        <button class="">Flex item</button>
        <button class="">Flex item</button>
        <button class="">Third flex item</button>
        <button class="">Third flex item</button>
        <button class="closebtn" @onclick="WidthChanger">×</button>
    </div>
</div>

@code {
    public string SidePanelWidth { get; set; } = "0%";

    void WidthChanger()
    {
        if (SidePanelWidth == "25%")
            SidePanelWidth = "0%";
        else
            SidePanelWidth = "25%";
    }
}

@code {
    public static List<Users> UsersList { get; set; }
    public List<ThemeModel> ThemeModels { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (UsersList == null)
        {
            UsersList = await UserRepository.GetAllUsersAsync();
        }
        ThemeModels = ThemesLogic.InitializeThemes();
    }


    [Parameter]
    public string Theme { get; set; } = "colorBlack";


    public void ChangeTheme(string currentTheme)
    {
        ThemesLogic.CurrentTheme = currentTheme;
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

}