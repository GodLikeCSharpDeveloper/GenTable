@using System.Linq.Expressions
@using System.Reflection
@inherits MainLayout
@inject IOrderRepositoryServise OrderRepository
@inject IUserRepositoryService UserRepository

<div class="row">
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[0], PropBool[0])'>#</button></th>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[1], PropBool[1])'>Date created</button></th>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[2], PropBool[2])'>User's name</button></th>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[3], PropBool[3])'>Is canceled?</button></th>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[4], PropBool[4])'>Price</button></th>
                    <th scope="col"><button class="btn" @onclick='() => Change(NamesForHtml[1], PropBool[5])'>List of products</button></th>
                </tr>

            </thead>
            <tbody>
                @foreach (var order in OrdersList)
                {

                    <tr>
                        <th scope="row">@order.Id</th>
                        <td>@order.CreateOrderDate</td>
                        <td><button class="btn">@order.User.FirstName @order.User.LastName</button></td>
                        <td>@order.IsFullfilled</td>
                        <td>@order.FullPrice</td>
                        <td>
                            @foreach (var prod in order.Products)
                            {

                                <a href="">@prod.Name, </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    [Parameter]
    public List<OrderModel> AdminsOrders { get; set; }
    public Dictionary<string, bool> PropsBools { get; set; }
    public List<string> NamesForHtml { get; set; } = new List<string>
    {
        "Id", "CreateOrderDate", "User.FirstName", "IsFullfilled", "FullPrice"
    };
    [Parameter]
    public bool[] PropBool { get; set; } = new bool[5];
    //List<int> nums1 = new List<int> { 2, 4, 6, 8, 10 };
    //List<int> nums2 = new List<int> { 1, 3, 6, 9, 12};

    //if (nums1.Any(x => nums2.Any(y => y == x)))
    //{
    //    Console.WriteLine("There are equal elements");
    //}
    //else
    //{
    //    Console.WriteLine("No Match Found!");
    //}
    [Parameter]
    public int[] MyIds { get; set; } = new int[5];
    void Change(string prop, bool propbool)
    {
        int i = 0;
        foreach (var item in OrderPropertyInfos)
        {
            if (item.Name == prop)
            {
                PropBool[i] = !PropBool[i];
            }
            i++;
        }
        IQueryable<OrderModel> OrderedOrder = OrdersList.AsQueryable();
        OrdersList = OrderedOrder.OrderBy(prop, propbool).ToList();
    }
}
