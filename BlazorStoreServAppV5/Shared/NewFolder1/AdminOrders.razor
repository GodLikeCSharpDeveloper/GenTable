@using System.Linq.Expressions
@using System.Reflection
@inherits MainLayout
@inject IOrderRepositoryServise OrderRepository
@inject IUserRepositoryService UserRepository

<div class="row">
    <div class="col">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col"><button class="btn" @onclick="SortBy">#</button></th>
                    <th scope="col">Date created</th>
                    <th scope="col">User's name'</th>
                    <th scope="col">Is canceled?</th>
                    <th scope="col">Price</th>
                    <th scope="col">List of products</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var order in OrdersList)
                {

                    <tr>
                        <th scope="row">@order.Id</th>
                        <td>@order.CreateOrderDate</td>
                        <td><button class="btn">@order.User.FirstName @order.User.LastName</button></td>
                        <td>@order.IsFullfilled</td>
                        <td>@FullPrices(order.Products)</td>
                        <td>
                            @foreach (var prod in order.Products)
                            {
                                <a href="">@prod.Name, </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {

    protected async Task OnInitializedAsync()
    {
        OrdersList = OrdersList.OrderBy(x => x.IsFullfilled).ToList();
    }
    [Parameter]
    public int FullPrice { get; set; } = 0;
    int FullPrices(List<ProductModel> prods)
    {
        foreach (var order in prods)
        {
            FullPrice = +order.Price;
        }
        return FullPrice;
    }
    public static class MissingExtension
    {
        public static IOrderedQueryable<TEntity> OrderBy<TEntity>(this IQueryable<TEntity> source, string orderByProperty, bool desc)
        {
            string command = desc ? "OrderByDescending" : "OrderBy";
            var type = typeof(TEntity);
            var property = type.GetProperty(orderByProperty);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExpression = Expression.Lambda(propertyAccess, parameter);
            var resultExpression = Expression.Call(typeof(Queryable), command, new Type[] { type, property.PropertyType },
                source.Expression, Expression.Quote(orderByExpression));
            return (IOrderedQueryable<TEntity>)source.Provider.CreateQuery<TEntity>(resultExpression);
        }
    }

    void Change()
    {
        OrdersList = OrdersList.OrderBy()
    }
}
