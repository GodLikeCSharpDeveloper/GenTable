@page "/Products"
@using BlazorStoreServAppV5.Repository.ThemeRepository
@inherits MainLayout
@inject IDescriptionRepositoryService Description
@inject IUserRepositoryService User
@inject IProductRepositoryService Product
@inject IOrderRepositoryServise Order
@inject IThemeLogic ThemesLogic
<div class="row">
    <div class="col">
        <input class="searcher" type="search" placeholder="Type" size="31" @bind-value="Request" />
        <button @onclick="()=>Searcher(Request)"></button>
        <ul class="list-group">
            <li class="list-group-item">
                @foreach (var category in CategoriesList)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="flexCheckDefault" value="@category.Id" @oninput="e=>CategoryAddRemove(category.Id, e)">
                        <label class="form-check-label" for="flexCheckDefault">
                            @category.Name
                        </label>
                    </div>
                }
            </li>
        </ul>


    </div>
    @foreach (var prod in Products)
    {
        <div class="col">
            <div class="card" style="width: 18rem;">
                <img class="card-img-top" src="..." alt="Card image cap">
                <div class="card-body">
                    <h5 class="card-title">Name: @prod.Name</h5>
                    <p class="card-text">ID: @prod.Id</p>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var cat in prod.CategoryModels)
                    {
                        <li class="list-group-item">category name: @cat.Name</li>
                    }
                </ul>
                <div class="card-body">
                    <a href="#" class="card-link">Card link</a>
                    <a href="#" class="card-link">Another link</a>
                </div>
            </div>
        </div>
    }
</div>

@code {

    public List<Users> UsersList { get; set; }

    public List<OrderModel> OrdersList { get; set; }
    public List<ProductModel> Products { get; set; } = new();
    [Parameter]
    public string Request { get; set; }
    protected override async Task OnInitializedAsync()
    {
        
    }

    public List<int> CatIds { get; set; } = new();
    public List<ProductModel> CategoryAddRemove(int Id, ChangeEventArgs e)
    {
        Products.Clear();
        if ((bool)e.Value)
        {
            CatIds.Add(Id);
        }
        else
        {
            CatIds.Remove(Id);
        }
        foreach (var item in ProductsList)
        {
            foreach (var cat in item.CategoryModels)
            {
                foreach(var a in CatIds)
                {
                    if(a.Equals(cat.Id))
                        Products.Add(item);
                }   
            }
        }
        StateHasChanged();
        return Products;
    }

    protected void Searcher(string value)
    {
        //Products.Clear();
        if (value != null)
        {
            var currList = Products;
            foreach (var category in currList.ToList())
            {
                if (category.Name.ToLower().Contains(value.ToLower()))
                    Products.Add(category);
                foreach (var cat in category.CategoryModels)
                {
                    if (cat.Name.ToLower().Contains(value.ToLower()))
                        Products.Add(category);
                }
            }
        }
        else
        {
            Products = ProductsList;
        }
        StateHasChanged();

    }
}


