@page "/Products"
@using BlazorStoreServAppV5.Repository.ThemeRepository
@inherits MainLayout
@inject IDescriptionRepositoryService Description
@inject IUserRepositoryService User
@inject IProductRepositoryService Product
@inject IOrderRepositoryServise Order
@inject IThemeLogic ThemesLogic

<div class="container-fluid">
    <div class="row flex-row">
        <div class="col-lg-4 col-md-12 col-sm-12 col-12">
            <div class="input-group mb-3">
                <input type="search" class="form-control srch" placeholder="Type to search" @bind-value="Request">
                <button class="input-group-text srchbutton" @onclick="() => Searcher(Request)">Search</button>
            </div>
            <div class="">
                <ul class="list-group">
                    <li class="list-group-item CheckboxListStyle">
                        @foreach (var category in CategoriesList)
                        {
                            <div class="form-check ">
                                <input class="form-check-input " type="checkbox" id="flexCheckDefault" value="@category.Id" @oninput="e => CategoryAddRemove(category.Id, e)">
                                <label class="form-check-label" for="flexCheckDefault">
                                    @category.Name
                                </label>
                            </div>
                        }
                    </li>
                </ul>
            </div>
        </div>


        @foreach (var prod in Products)
        {
            <div class="col-12 col-lg-2 col-md-12 col-sm-12  CardList">
                <div class="card">
                    <div class="col-sm-4">
                        <img class="card-img-top" src="/images.png" alt="Card image cap">
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Name: @prod.Name</h5>
                    </div>
                    <ul class="list-group ">

                        <li class="list-group-item cardList">
                            @foreach (var cat in prod.CategoryModels)
                            {
                                if (prod.CategoryModels.Last() != cat)
                                {
                                    <a>@cat.Name, </a>
                                }
                                else
                                {
                                    <a> @cat.Name</a>
                                }
                            }
                        </li>

                    </ul>
                    <div class="card-body">
                        <button class="btn btn-dark btn-outline-light" @onclick="() => AddToCart(prod)">Buy</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    public List<Users> UsersList { get; set; }
    public List<OrderModel> OrdersList { get; set; }
    public List<ProductModel> tempProds;
    protected override async Task OnInitializedAsync()
    {
        Products = ProductsList;
         
        
    }

    #region "SearchLogic"

    public List<int> CatIds { get; set; } = new();
    public List<ProductModel> Prods { get; set; }
    public List<ProductModel> Products { get; set; } = new();

    public List<ProductModel> CategoryAddRemove(int Id, ChangeEventArgs e)
    {
        Products.Clear();
        if ((bool)e.Value)
        {
            CatIds.Add(Id);
        }
        else
        {
            CatIds.Remove(Id);
        }
        foreach (var item in ProductsList.ToList())
        {
            foreach (var cat in item.CategoryModels)
            {
                foreach (var a in CatIds)
                {
                    if (a.Equals(cat.Id))
                        Products.Add(item);
                }
            }
        }
        if (Products.Count == 0 && (bool)e.Value == false)
        {
            Products = ProductsList.ToList();
        }

        if (Request != null)
            Searcher(Request);
        StateHasChanged();
        return Products;
    }

    [Parameter]
    public string Request { get; set; }

    protected void Searcher(string value)
    {
        Prods = Products;

        if (!string.IsNullOrEmpty(value))
        {
            foreach (var item in Prods.ToList())
            {
                foreach (var cat in item.CategoryModels)
                {
                    if (!cat.Name.ToLower().Contains(value.ToLower()))
                        Products.Remove(item);
                    if (item.Name.ToLower().Contains(value.ToLower()))
                        Products.Add(item);
                }
            }
            Products = Products.Distinct().ToList();
        }
        else
        {
            if (Prods == null)
                Prods = ProductsList;
            if (Products.Count == 0 || Products.Count > ProductsList.Count || Products == null)
            {
                Products = ProductsList;
            }
            else
            {
                Products = Prods;
            }
        }
    }

    #endregion

    public void AddToCart(ProductModel product)
    {
        CartList.Add(product);
    }

}

